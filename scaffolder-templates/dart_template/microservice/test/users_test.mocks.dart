// Mocks generated by Mockito 5.1.0 from annotations
// in microservice/test/users_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:fluent_query_builder/src/connection_info.dart' as _i7;
import 'package:fluent_query_builder/src/db_layer.dart' as _i4;
import 'package:fluent_query_builder/src/models/block.dart' as _i9;
import 'package:fluent_query_builder/src/models/expression.dart' as _i5;
import 'package:fluent_query_builder/src/models/join_type.dart' as _i10;
import 'package:fluent_query_builder/src/models/query_builder.dart' as _i3;
import 'package:fluent_query_builder/src/models/query_builder_options.dart'
    as _i6;
import 'package:fluent_query_builder/src/models/sort_order.dart' as _i11;
import 'package:fluent_query_builder/src/models/union_type.dart' as _i12;
import 'package:fluent_query_builder/src/query_executors/query_executor.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeQueryExecutor_0<U> extends _i1.Fake implements _i2.QueryExecutor<U> {
}

class _FakeQueryBuilder_1 extends _i1.Fake implements _i3.QueryBuilder {}

class _FakeDbLayer_2 extends _i1.Fake implements _i4.DbLayer {}

class _FakeExpression_3 extends _i1.Fake implements _i5.Expression {}

class _FakeQueryBuilderOptions_4 extends _i1.Fake
    implements _i6.QueryBuilderOptions {}

/// A class which mocks [DbLayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockDbLayer extends _i1.Mock implements _i4.DbLayer {
  MockDbLayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.QueryExecutor<dynamic> get executor =>
      (super.noSuchMethod(Invocation.getter(#executor),
              returnValue: _FakeQueryExecutor_0<dynamic>())
          as _i2.QueryExecutor<dynamic>);
  @override
  set executor(_i2.QueryExecutor<dynamic>? _executor) =>
      super.noSuchMethod(Invocation.setter(#executor, _executor),
          returnValueForMissingStub: null);
  @override
  _i3.QueryBuilder get currentQuery =>
      (super.noSuchMethod(Invocation.getter(#currentQuery),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  set currentQuery(_i3.QueryBuilder? _currentQuery) =>
      super.noSuchMethod(Invocation.setter(#currentQuery, _currentQuery),
          returnValueForMissingStub: null);
  @override
  set options(_i6.QueryBuilderOptions? _options) =>
      super.noSuchMethod(Invocation.setter(#options, _options),
          returnValueForMissingStub: null);
  @override
  set connectionInfo(_i7.DBConnectionInfo? _connectionInfo) =>
      super.noSuchMethod(Invocation.setter(#connectionInfo, _connectionInfo),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i4.DbLayer> connect(_i7.DBConnectionInfo? connInfo) =>
      (super.noSuchMethod(Invocation.method(#connect, [connInfo]),
              returnValue: Future<_i4.DbLayer>.value(_FakeDbLayer_2()))
          as _i8.Future<_i4.DbLayer>);
  @override
  _i5.Expression expression() =>
      (super.noSuchMethod(Invocation.method(#expression, []),
          returnValue: _FakeExpression_3()) as _i5.Expression);
  @override
  _i3.QueryBuilder select() =>
      (super.noSuchMethod(Invocation.method(#select, []),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder update() =>
      (super.noSuchMethod(Invocation.method(#update, []),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder insert() =>
      (super.noSuchMethod(Invocation.method(#insert, []),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder insertGetId({String? defaultIdColName = r'id'}) =>
      (super.noSuchMethod(
          Invocation.method(
              #insertGetId, [], {#defaultIdColName: defaultIdColName}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder insertGetAll({List<String>? returningFields}) =>
      (super.noSuchMethod(
          Invocation.method(
              #insertGetAll, [], {#returningFields: returningFields}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder raw(String? rawQueryString) =>
      (super.noSuchMethod(Invocation.method(#raw, [rawQueryString]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i8.Future<List<List<dynamic>?>?> exec() =>
      (super.noSuchMethod(Invocation.method(#exec, []),
              returnValue: Future<List<List<dynamic>?>?>.value())
          as _i8.Future<List<List<dynamic>?>?>);
  @override
  _i8.Future<List<List<dynamic>?>?> get() =>
      (super.noSuchMethod(Invocation.method(#get, []),
              returnValue: Future<List<List<dynamic>?>?>.value())
          as _i8.Future<List<List<dynamic>?>?>);
  @override
  _i8.Future<List<Map<String, Map<String?, dynamic>>>> getAsMapWithMeta() =>
      (super.noSuchMethod(Invocation.method(#getAsMapWithMeta, []),
          returnValue: Future<List<Map<String, Map<String?, dynamic>>>>.value(
              <Map<String, Map<String?, dynamic>>>[])) as _i8
          .Future<List<Map<String, Map<String?, dynamic>>>>);
  @override
  _i8.Future<List<dynamic>?> first() =>
      (super.noSuchMethod(Invocation.method(#first, []),
              returnValue: Future<List<dynamic>?>.value())
          as _i8.Future<List<dynamic>?>);
  @override
  _i8.Future<Map<String, Map<String?, dynamic>>?> firstAsMapWithMeta() =>
      (super.noSuchMethod(Invocation.method(#firstAsMapWithMeta, []),
              returnValue: Future<Map<String, Map<String?, dynamic>>?>.value())
          as _i8.Future<Map<String, Map<String?, dynamic>>?>);
  @override
  _i8.Future<List<Map<String?, dynamic>>> getAsMap() =>
      (super.noSuchMethod(Invocation.method(#getAsMap, []),
              returnValue: Future<List<Map<String?, dynamic>>>.value(
                  <Map<String?, dynamic>>[]))
          as _i8.Future<List<Map<String?, dynamic>>>);
  @override
  _i8.Future<Map<String?, dynamic>?> firstAsMap() =>
      (super.noSuchMethod(Invocation.method(#firstAsMap, []),
              returnValue: Future<Map<String?, dynamic>?>.value())
          as _i8.Future<Map<String?, dynamic>?>);
  @override
  _i8.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<T?> transaction<T>(_i8.FutureOr<T>? Function(_i4.DbLayer)? f) =>
      (super.noSuchMethod(Invocation.method(#transaction, [f]),
          returnValue: Future<T?>.value()) as _i8.Future<T?>);
  @override
  _i8.Future<dynamic> transaction2(
          _i8.Future<dynamic> Function(_i4.DbLayer)? queryBlock,
          {int? commitTimeoutInSeconds}) =>
      (super.noSuchMethod(
          Invocation.method(#transaction2, [queryBlock],
              {#commitTimeoutInSeconds: commitTimeoutInSeconds}),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<_i4.DbLayer> startTransaction() =>
      (super.noSuchMethod(Invocation.method(#startTransaction, []),
              returnValue: Future<_i4.DbLayer>.value(_FakeDbLayer_2()))
          as _i8.Future<_i4.DbLayer>);
  @override
  _i8.Future<_i4.DbLayer> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
              returnValue: Future<_i4.DbLayer>.value(_FakeDbLayer_2()))
          as _i8.Future<_i4.DbLayer>);
  @override
  _i8.Future<_i4.DbLayer> rollback() =>
      (super.noSuchMethod(Invocation.method(#rollback, []),
              returnValue: Future<_i4.DbLayer>.value(_FakeDbLayer_2()))
          as _i8.Future<_i4.DbLayer>);
  @override
  _i8.Future<dynamic> reconnectIfNecessary() =>
      (super.noSuchMethod(Invocation.method(#reconnectIfNecessary, []),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<bool> isConnect() =>
      (super.noSuchMethod(Invocation.method(#isConnect, []),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<int> execute(String? query,
          {Map<String, dynamic>? substitutionValues}) =>
      (super.noSuchMethod(
          Invocation.method(
              #execute, [query], {#substitutionValues: substitutionValues}),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<dynamic> putSingle<T>(T? entity) =>
      (super.noSuchMethod(Invocation.method(#putSingle, [entity]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> putSingleGetId<T>(T? entity) =>
      (super.noSuchMethod(Invocation.method(#putSingleGetId, [entity]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<List<Map<String?, dynamic>>> getRelationFromMaps(
          List<Map<String?, dynamic>>? data,
          String? tableName,
          String? localKey,
          String? foreignKey,
          {String? relationName,
          dynamic defaultNull = const [],
          dynamic Function(Map<String?, dynamic>)? callback_fields,
          dynamic Function(_i3.QueryBuilder)? callback_query,
          dynamic isSingle = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getRelationFromMaps, [
                data,
                tableName,
                localKey,
                foreignKey
              ], {
                #relationName: relationName,
                #defaultNull: defaultNull,
                #callback_fields: callback_fields,
                #callback_query: callback_query,
                #isSingle: isSingle
              }),
              returnValue: Future<List<Map<String?, dynamic>>>.value(
                  <Map<String?, dynamic>>[]))
          as _i8.Future<List<Map<String?, dynamic>>>);
}

/// A class which mocks [QueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryBuilder extends _i1.Mock implements _i3.QueryBuilder {
  MockQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.QueryBuilderOptions get mOptions => (super.noSuchMethod(
      Invocation.getter(#mOptions),
      returnValue: _FakeQueryBuilderOptions_4()) as _i6.QueryBuilderOptions);
  @override
  set mOptions(_i6.QueryBuilderOptions? _mOptions) =>
      super.noSuchMethod(Invocation.setter(#mOptions, _mOptions),
          returnValueForMissingStub: null);
  @override
  set mBlocks(List<_i9.Block>? _mBlocks) =>
      super.noSuchMethod(Invocation.setter(#mBlocks, _mBlocks),
          returnValueForMissingStub: null);
  @override
  bool isQuery() =>
      (super.noSuchMethod(Invocation.method(#isQuery, []), returnValue: false)
          as bool);
  @override
  bool isContainFromBlock() =>
      (super.noSuchMethod(Invocation.method(#isContainFromBlock, []),
          returnValue: false) as bool);
  @override
  String toSql({bool? isFirst = false, bool? isCount = false}) =>
      (super.noSuchMethod(
          Invocation.method(#toSql, [], {#isFirst: isFirst, #isCount: isCount}),
          returnValue: '') as String);
  @override
  Map<String, dynamic> buildSubstitutionValues() =>
      (super.noSuchMethod(Invocation.method(#buildSubstitutionValues, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  List<String?> buildReturningFields() =>
      (super.noSuchMethod(Invocation.method(#buildReturningFields, []),
          returnValue: <String?>[]) as List<String?>);
  @override
  _i8.Future<List<List<dynamic>?>?> exec() =>
      (super.noSuchMethod(Invocation.method(#exec, []),
              returnValue: Future<List<List<dynamic>?>?>.value())
          as _i8.Future<List<List<dynamic>?>?>);
  @override
  _i8.Future<int?> count() => (super.noSuchMethod(Invocation.method(#count, []),
      returnValue: Future<int?>.value()) as _i8.Future<int?>);
  @override
  _i8.Future<List<List<dynamic>?>?> get() =>
      (super.noSuchMethod(Invocation.method(#get, []),
              returnValue: Future<List<List<dynamic>?>?>.value())
          as _i8.Future<List<List<dynamic>?>?>);
  @override
  _i8.Future<List<dynamic>?> first() =>
      (super.noSuchMethod(Invocation.method(#first, []),
              returnValue: Future<List<dynamic>?>.value())
          as _i8.Future<List<dynamic>?>);
  @override
  _i8.Future<List<Map<String, Map<String?, dynamic>>>> getAsMapWithMeta() =>
      (super.noSuchMethod(Invocation.method(#getAsMapWithMeta, []),
          returnValue: Future<List<Map<String, Map<String?, dynamic>>>>.value(
              <Map<String, Map<String?, dynamic>>>[])) as _i8
          .Future<List<Map<String, Map<String?, dynamic>>>>);
  @override
  _i8.Future<Map<String, Map<String?, dynamic>>?> firstAsMapWithMeta() =>
      (super.noSuchMethod(Invocation.method(#firstAsMapWithMeta, []),
              returnValue: Future<Map<String, Map<String?, dynamic>>?>.value())
          as _i8.Future<Map<String, Map<String?, dynamic>>?>);
  @override
  _i8.Future<List<Map<String?, dynamic>>> getAsMap() =>
      (super.noSuchMethod(Invocation.method(#getAsMap, []),
              returnValue: Future<List<Map<String?, dynamic>>>.value(
                  <Map<String?, dynamic>>[]))
          as _i8.Future<List<Map<String?, dynamic>>>);
  @override
  _i8.Future<Map<String?, dynamic>?> firstAsMap() =>
      (super.noSuchMethod(Invocation.method(#firstAsMap, []),
              returnValue: Future<Map<String?, dynamic>?>.value())
          as _i8.Future<Map<String?, dynamic>?>);
  @override
  _i8.Future<List<T>> fetchAll<T>(
          [T Function(Map<String, dynamic>)? factory]) =>
      (super.noSuchMethod(Invocation.method(#fetchAll, [factory]),
          returnValue: Future<List<T>>.value(<T>[])) as _i8.Future<List<T>>);
  @override
  _i8.Future<T?> fetchSingle<T>([T Function(Map<String?, dynamic>)? factory]) =>
      (super.noSuchMethod(Invocation.method(#fetchSingle, [factory]),
          returnValue: Future<T?>.value()) as _i8.Future<T?>);
  @override
  _i8.Future<dynamic> putSingle<T>(T? entity) =>
      (super.noSuchMethod(Invocation.method(#putSingle, [entity]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> updateSingle<T>(T? entity,
          [_i3.QueryBuilder? queryBuilder]) =>
      (super.noSuchMethod(
          Invocation.method(#updateSingle, [entity, queryBuilder]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> deleteSingle<T>(T? entity,
          [_i3.QueryBuilder? queryBuilder]) =>
      (super.noSuchMethod(
          Invocation.method(#deleteSingle, [entity, queryBuilder]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i3.QueryBuilder distinct() =>
      (super.noSuchMethod(Invocation.method(#distinct, []),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder from(String? table, {String? alias}) =>
      (super.noSuchMethod(Invocation.method(#from, [table], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder fromRaw(String? fromRawSqlString) =>
      (super.noSuchMethod(Invocation.method(#fromRaw, [fromRawSqlString]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder fromSubQuery(_i3.QueryBuilder? table, {String? alias}) =>
      (super.noSuchMethod(
          Invocation.method(#fromSubQuery, [table], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder field(String? field, {String? alias}) =>
      (super.noSuchMethod(Invocation.method(#field, [field], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder fieldSubQuery(_i3.QueryBuilder? field, {String? alias}) =>
      (super.noSuchMethod(
          Invocation.method(#fieldSubQuery, [field], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder fields(Iterable<String>? fields) =>
      (super.noSuchMethod(Invocation.method(#fields, [fields]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder fieldRaw(String? setFieldRawSql) =>
      (super.noSuchMethod(Invocation.method(#fieldRaw, [setFieldRawSql]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder group(String? field) =>
      (super.noSuchMethod(Invocation.method(#group, [field]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder groups(Iterable<String>? fields) =>
      (super.noSuchMethod(Invocation.method(#groups, [fields]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder groupRaw(String? groupRawSql) =>
      (super.noSuchMethod(Invocation.method(#groupRaw, [groupRawSql]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder joinRaw(String? sql) =>
      (super.noSuchMethod(Invocation.method(#joinRaw, [sql]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder join(String? joinTableName, String? condition,
          {String? alias, _i10.JoinType? type = _i10.JoinType.INNER}) =>
      (super.noSuchMethod(
          Invocation.method(
              #join, [joinTableName, condition], {#alias: alias, #type: type}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder innerJoin(String? joinTableName, String? field1,
          String? operator, String? field2, {String? alias}) =>
      (super.noSuchMethod(
          Invocation.method(#innerJoin,
              [joinTableName, field1, operator, field2], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder leftJoin(String? joinTableName, String? field1,
          String? operator, String? field2, {String? alias}) =>
      (super.noSuchMethod(
          Invocation.method(#leftJoin,
              [joinTableName, field1, operator, field2], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder rightJoin(String? joinTableName, String? field1,
          String? operator, String? field2, {String? alias}) =>
      (super.noSuchMethod(
          Invocation.method(#rightJoin,
              [joinTableName, field1, operator, field2], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder joinWithSubQuery(_i3.QueryBuilder? table, String? condition,
          {String? alias, _i10.JoinType? type = _i10.JoinType.INNER}) =>
      (super.noSuchMethod(
          Invocation.method(#joinWithSubQuery, [table, condition],
              {#alias: alias, #type: type}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder joinWithExpression(String? table, _i5.Expression? condition,
          {String? alias, _i10.JoinType? type = _i10.JoinType.INNER}) =>
      (super.noSuchMethod(
          Invocation.method(#joinWithExpression, [table, condition],
              {#alias: alias, #type: type}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder joinWithQueryExpr(
          _i3.QueryBuilder? table, _i5.Expression? condition,
          {String? alias, _i10.JoinType? type = _i10.JoinType.INNER}) =>
      (super.noSuchMethod(
          Invocation.method(#joinWithQueryExpr, [table, condition],
              {#alias: alias, #type: type}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder where(String? condition,
          [Object? param, String? andOr = r'AND']) =>
      (super.noSuchMethod(Invocation.method(#where, [condition, param, andOr]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder whereExpr(_i5.Expression? condition,
          [Object? param, String? andOr = r'AND']) =>
      (super.noSuchMethod(
          Invocation.method(#whereExpr, [condition, param, andOr]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder whereRaw(String? whereRawSql, [String? andOr = r'AND']) =>
      (super.noSuchMethod(Invocation.method(#whereRaw, [whereRawSql, andOr]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder whereSafe(String? field, String? operator, dynamic value) =>
      (super.noSuchMethod(
          Invocation.method(#whereSafe, [field, operator, value]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder orWhereSafe(
          String? field, String? operator, dynamic value) =>
      (super.noSuchMethod(
          Invocation.method(#orWhereSafe, [field, operator, value]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder whereGroup(
          _i3.QueryBuilder Function(_i3.QueryBuilder)? function) =>
      (super.noSuchMethod(Invocation.method(#whereGroup, [function]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder orWhereGroup(
          _i3.QueryBuilder Function(_i3.QueryBuilder)? function) =>
      (super.noSuchMethod(Invocation.method(#orWhereGroup, [function]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder limit(int? value) =>
      (super.noSuchMethod(Invocation.method(#limit, [value]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder order(String? field,
          {_i11.SortOrder? dir = _i11.SortOrder.ASC}) =>
      (super.noSuchMethod(Invocation.method(#order, [field], {#dir: dir}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder offset(int? value) =>
      (super.noSuchMethod(Invocation.method(#offset, [value]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder union(String? table, _i12.UnionType? unionType) =>
      (super.noSuchMethod(Invocation.method(#union, [table, unionType]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder unionSubQuery(
          _i3.QueryBuilder? table, _i12.UnionType? unionType) =>
      (super.noSuchMethod(Invocation.method(#unionSubQuery, [table, unionType]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder table(String? table, {String? alias}) =>
      (super.noSuchMethod(Invocation.method(#table, [table], {#alias: alias}),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder set(String? field, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#set, [field, value]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder setAll(Map<String, dynamic>? fieldsAndValues) =>
      (super.noSuchMethod(Invocation.method(#setAll, [fieldsAndValues]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder into(String? table) =>
      (super.noSuchMethod(Invocation.method(#into, [table]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
  @override
  _i3.QueryBuilder fromQuery(
          Iterable<String>? fields, _i3.QueryBuilder? query) =>
      (super.noSuchMethod(Invocation.method(#fromQuery, [fields, query]),
          returnValue: _FakeQueryBuilder_1()) as _i3.QueryBuilder);
}
